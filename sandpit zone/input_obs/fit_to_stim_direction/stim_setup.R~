library(tidyverse)

##relevant reference studies:
##Trueblood 2013 'not just for consumers':
## (stim generated by) a bivariate normal distribution in which the mean height was 50 pixels, the mean width was 80 pixels, and the variance in each  dimension was 2 pixels, with no correlation between variance in height and width.
##Black rectangles on white background, L-to-R line with jitter in height-of-placement, size unspecified, looks like up to 25px in the example.
##Unclear how far away decoys were! Can guess 5% ish from scatterplot presentation? spektor claims 10-16%, where did they get this number?

##spektor 2018 'repulsion effect'
##Triangle arrangement around center of screen (tested vs line in exp 4b)
##difficulty levels is for a TRUE difference between alternatives of 3%, 7% or 30% (catch trials). Target decoy distance is 2%, 5%, or 9% in exp1, exp2 adds a 14% level, and reports a main effect of distance (closer: more repulsion, further less repulstion, approaching indifference but not flipping to attration) 
##Rectangles are 230–270 pixels width, 150–190 pixels height
## Repulsion at shortest attribute distances (5%), attraction at largest distances (14%), dead-zone in between (9%). So this is the range to aim for?
## "When the options were arranged farther apart, the attraction effect disappeared entirely and even became a robust repulsion effect. But the stimulus design also played a crucial role: When individuals faced choice sets of varying difficulty and, more important, with varying attribute distances between the target and decoy, the repulsion effect became stronger or the attraction effect became weaker"

##SO: CURRENT DESIGN PITCH
##RF decoys only because decoy type is a distraction.
## 5,10,15% decoy distances (x5 shapeflavors, orientations randomized)
##attraction, similarity, and compromise effects.
##absolute sizes in the low three digit px range.


set.seed(4) #reproducible

##Convention: an option is a list(x,y), a triad is a list of three options.
get_decoy <- function(option,delta){
    return(
        list(
            x=sqrt(delta)*option$x,
            y=sqrt(delta)*option$y
        )#result: total area is multiplied by delta. If delta is .95, you get a decoy with a 5% reduction in area, reducing x and y by the same proportion. Woo.
    )
}

get_target <- function(){
    return(
        list(x=abs(rnorm(1,1,.1)),y=abs(rnorm(1,.5,.1)))
        )
}

get_clone <- function(anoption){
    return(
        list(x=anoption$x, y=anoption$y)
        )
    }

get_competitor <- function(option){ #competitors are just flipped (rot90) targets.
    return (list(x=option$y,y=option$x))
}


##Convenient for R
triad_to_df <- function(atriad){
    return(data.frame(option1attribute1=atrial[[1]][[1]],
                      option1attribute2=atrial[[1]][[2]],
                      option2attribute1=atrial[[2]][[1]],
                      option2attribute2=atrial[[2]][[2]],
                      option3attribute1=atrial[[3]][[1]],
                      option3attribute2=atrial[[3]][[2]]))
}


#Convenient for stim display:
triad_to_js <- function(triad,shapetypes,roles,orientations,stimid){
    ##js call is triangle(base,height,templatetype, orientation)
    ##    js.string <- "trialgetter(",triad[[1]]$x,",",triad[[1]$y,",",triad[[2]]$x,",",triad[[2]$y,",",triad[[3]]$x,",",triad[[3]$y,",[",roles,"]",",",stimid
    paste(paste0("trialgetter(",triad[[1]]$x),triad[[1]]$y,triad[[2]]$x,triad[[2]]$y,triad[[3]]$x,triad[[3]]$y,
          paste0("['",paste0(shapetypes,collapse="','"),"']",collapse=""),
          paste0("['",paste0(roles,collapse="','"),"']",collapse=""),
          paste0("['",paste0(orientations,collapse="','"),"']",collapse=""),
          stimid=paste0("'",stimid,"')"),sep=",")
                                                                                  
    ##orientation is 0,1,2,3 for NSEW (NS is tall, EW is wide, N has point up base down)
    ##templatetype is one of 'rightangle', 'equilateral', 'skew'.

    }

##MAIN()
stimlist <- c()
##RF decoys only because decoy type is a distraction.
## 5,10,15% decoy distances (x5 shapeflavors, orientations randomized)
##attraction, similarity, and compromise effects.
##absolute sizes in the low three digit px range.

#attraction decoys
for(decoydist in c(0.95,0.9,0.85)){#5,10,15% gap on decoys
    for(anorientation in list(c(0,1,0))){
        targ <-  get_target()
        comp <- get_competitor(targ)
        decoy <- get_decoy(targ,.95)
        
        atrial <- list(targ,comp,decoy)
        
        print(
            triad_to_js(atrial,c(0,1,2), c("targ","comp","decoy"),anorientation,"demo_trial_1")
            )
    }
    
}
