library(tidyverse)
library(rstan)
library(patchwork)
library(MCMCpack)#supplies rdirichlet, but overrides 'sample'
rm(list=ls())
set.seed(4)

do_a_survey <- function(calcsd_levels,ordsd_levels,tolerance_levels,modelnames,targfolder){
    ##factors to manipulate should be vectors (of the same length), targfolder name a dir that exists in getwd() (passed without / suffix).
    hm_surveypoints <- length(calcsd_levels)
    if(any(as.logical(map(list(calcsd_levels,ordsd_levels,tolerance_levels,modelnames), function(x){length(x)!=hm_surveypoints}))))stop("unequal setup lists")
    if(!targfolder%in%list.files())stop(paste(targfolder," not found"))
    if(!all(modelnames%in%list.files()))stop("model not found")
##set up
hm_ppnts=20 #ppnts are identical for now, but provide repetition over the stimuli to check choice-proportions: each participant sees each stim once.
hm_options=3 #can change to 2 if you want.
hm_attributes=2; #can't change, hand-coded into stim in simexp.df, up to you to stay consistent.

sim.k <- matrix(1/hm_attributes,ncol=hm_attributes,nrow=hm_ppnts)#,# demo1: even weight on all attributes: all ppnts are identical
#sim.k <- rdirichlet(hm_ppnts,rep(1,hm_attributes)) #demo2, random weights to recover, all ppnts are different. Doesn't make much sense with the context effect demo stim, which are set up fo .5,.5 weights.

simexp.df <- read.table(text="trialid,option1attribute1,option1attribute2,option2attribute1,option2attribute2,option3attribute1,option3attribute2
1,0.25,0.75,0.75,0.25,.15,.75
2,0.25,0.75,0.75,0.25,.25,.60
3,0.25,0.75,0.75,0.25,.15,.65
4,0.25,0.75,0.75,0.25,0.5,0.5
5,0.25,0.75,0.75,0.25,0.2,0.8
6,0.25,0.75,0.75,0.25,0.3,0.7",
header=TRUE, sep=",") #'base' stim are {.25,.75} & its reflection, both have value .5 under weights {.5,.5}. '3rd option' decoys: match A worse on B, match B worse on A, worse on both, compromise candidate on equivalue line, similarity candidate close by on equivalue line.

accumulator <- data.frame()
for(i in 1:hm_ppnts){
    simexp.df$ppntid = i;
    accumulator <- rbind(accumulator,simexp.df)
}
simexp.df <- accumulator; rm(accumulator);
    ## data.frame(ppntid=rep(1:hm_ppnts,each=hm_stim),
              ##           trialid=1:hm_stim
              ##           )

#convert to stan-friendly format
ttoa = rep(NA,nrow(simexp.df)*hm_options*hm_attributes)
dim(ttoa) <- c(nrow(simexp.df),hm_options,hm_attributes)#convert to matrix
for(atrial in 1:nrow(simexp.df)){ #populate with values
    for(i in 1:hm_attributes){
        for(j in 1:hm_options){
            ttoa[atrial,j,i] <- simexp.df[atrial,paste0("option",j,"attribute",i)]
        }
    }
}

    for(surveypoint in 1:hm_surveypoints){
        calcsd_level = calcsd_levels[surveypoint]
        ordsd_level= ordsd_levels[surveypoint]
        tolerance_level = tolerance_levels[surveypoint]
        
datalist = list(hm_trials=nrow(simexp.df),
                hm_ppnts=hm_ppnts,
                ppntid=simexp.df$ppntid,

                hm_options=hm_options,
                hm_attributes=hm_attributes,

                truth_trial_option_attribute = ttoa,

                k=sim.k,
                calcsd_level=calcsd_level,
                ordsd_level=ordsd_level,
                tolerance_level=tolerance_level
                )

sim.fit <- stan(file=modelnames[surveypoint],
           data=datalist,
           iter=1000,
           init=function(){
               zeros <- rep(0,nrow(simexp.df)*hm_options*hm_attributes)
               dim(zeros)=c(nrow(simexp.df),hm_options,hm_attributes)
               list(est_trial_option_attribute=zeros)
           },
           chains=4,
           control = list(max_treedepth = 15));

withdecoy.samples <- as.data.frame(extract(sim.fit, permuted = TRUE))# extract returns a list of arrays

save.image(file=paste0(targfolder,"/calc",calcsd_level,"ord",ordsd_level,"tolerance",tolerance_level,"fit.RData"))
    }#for each surveypoint

    View("done")#optional, creates popup alert when finished.
}#do a survey function



#do_a_survey args: calcsd_levels,ordsd_levels,tolerance_levels,modelnames,targfolder


##"ord only change tolerance survey"
hm_trials = 5

do_a_survey(
calcsd_levels=rep(.5,hm_trials),#ignored, calc_off model used here.
ordsd_levels=rep(.25,hm_trials),
tolerance_levels=seq(from=.01,to=.2,length=hm_trials),
modelnames=rep("getchoices_CALC_OFF.stan",hm_trials),
targfolder="ordonly_varytolerance"
)
